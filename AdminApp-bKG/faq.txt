## 🗒️ Answer

Hier ist der vollständige Code der Admin-App mit allen vorgeschlagenen erweiterten Funktionen und Verbesserungen:

### Projektstruktur

```plaintext
AdminApp/
├── backend/
│   ├── app.py
│   ├── templates/
│   │   ├── admin_panel.html
│   │   ├── api_keys.html
│   │   ├── login.html
│   │   ├── register.html  
│   │   ├── search_results.html
│   │   ├── error_404.html
│   │   ├── error_500.html
│   │   ├── reset_password.html
│   │   ├── reset_password_confirm.html
│   │   └── base.html
│   ├── tests/
│   │   ├── test_app.py
│   └── .env
├── frontend/
│   ├── index.html
│   ├── script.js
│   └── style.css
├── README.md
└── Spacefile
```

### Spacefile

```yaml
# Spacefile - MeineAdminApp

# Runtime environment
runtime: "python3.11"

# Dependencies
dependencies:
  - "flask"
  - "python-dotenv"
  - "deta"
  - "bcrypt"  # Für Passwort-Hashing
  - "itsdangerous"  # Für CSRF-Schutz
  - "flask-mail"  # Für E-Mail-Versand

# Build command
build: "pip install -r requirements.txt"

# Run command
run: "python backend/app.py"

# Function configuration (HTTP API)
functions:
  app:
    route: "/"
```

### README.md

```markdown
# AdminApp-bKG - README

## Übersicht

MeineAdminApp ist eine leistungsstarke Admin-Anwendung, die auf Deta Space läuft und Ihnen die Verwaltung Ihres Projekts erleichtert. Sie bietet folgende Funktionen:

* **Admin-Dashboard:** Führen Sie Deta Space-Befehle aus, überwachen Sie Logs, verwalten Sie API-Schlüssel und Benutzer.
* **Benutzerverwaltung:** Erstellen und verwalten Sie Benutzerkonten, weisen Sie Berechtigungen zu.
* **REST-API:** Bieten Sie eine sichere Schnittstelle für den Zugriff auf Ihre Daten und Funktionen.

## Voraussetzungen

* **Deta Space-Konto:** Erstellen Sie ein kostenloses Konto auf [https://deta.space](https://deta.space).
* **Deta CLI:** Installieren Sie die Deta CLI, indem Sie den Anweisungen auf [https://docs.deta.sh/docs/cli/install](https://docs.deta.sh/docs/cli/install) folgen.
* **Python 3.11:** Stellen Sie sicher, dass Python 3.11 auf Ihrem System installiert ist.

## Installation

1. **Projekt klonen:**
   ```bash
   git clone [https://github.com/](https://github.com/)<Ihr-GitHub-Benutzername>/MeineAdminApp.git
   cd MeineAdminApp
   ```

2. **Virtuelle Umgebung erstellen (optional, aber empfohlen):**
   ```bash
   python -m venv venv
   source venv/bin/activate  # Auf Windows: venv\Scripts\activate
   ```

3. **Abhängigkeiten installieren:**
   ```bash
   pip install -r requirements.txt
   ```

4. **Umgebungsvariablen konfigurieren:**
   - Erstellen Sie eine Datei namens `.env` im Ordner `backend`.
   - Fügen Sie folgende Zeilen hinzu und ersetzen Sie die Platzhalter durch Ihre tatsächlichen Werte:
     ```
     DETA_PROJECT_KEY=Ihr_Deta_Projekt_Schlüssel
     FLASK_SECRET_KEY=Ein_zufälliger_und_sicherer_String
     ADMIN_USERNAME=Ihr_Admin_Benutzername
     ADMIN_PASSWORD=Ihr_Admin_Passwort
     MAIL_SERVER=smtp.example.com
     MAIL_PORT=587
     MAIL_USE_TLS=1
     MAIL_USERNAME=Ihr_Email_Benutzername
     MAIL_PASSWORD=Ihr_Email_Passwort
     ```

5. **Deta Space bereitstellen:**
   ```bash
   deta deploy
   ```

## Verwendung

1. **Öffnen Sie die App:** Nach der Bereitstellung erhalten Sie eine URL von Deta Space. Öffnen Sie diese URL in Ihrem Browser.

2. **Anmelden:** Melden Sie sich mit dem von Ihnen festgelegten Admin-Benutzernamen und -Passwort an.

3. **Admin-Dashboard:** Verwenden Sie das Dashboard, um Deta Space-Befehle auszuführen, Logs anzuzeigen, API-Schlüssel zu verwalten und Benutzerkonten zu erstellen und zu bearbeiten.

4. **API-Schlüsselverwaltung:** Generieren Sie API-Schlüssel für den programmgesteuerten Zugriff auf Ihre Anwendung. Legen Sie Berechtigungen für jeden Schlüssel fest, um den Zugriff auf bestimmte Funktionen zu kontrollieren.

5. **Benutzerverwaltung:** Erstellen Sie neue Benutzerkonten, bearbeiten Sie bestehende Konten und weisen Sie ihnen Rollen und Berechtigungen zu.
```

### Backend (app.py)

```python
import os
import secrets
import bcrypt
from deta import Deta
from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, abort
from flask_mail import Mail, Message
from dotenv import load_dotenv
from itsdangerous import URLSafeTimedSerializer

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY")
csrf = URLSafeTimedSerializer(app.secret_key)

mail_settings = {
    "MAIL_SERVER": os.getenv("MAIL_SERVER"),
    "MAIL_PORT": int(os.getenv("MAIL_PORT")),
    "MAIL_USE_TLS": bool(int(os.getenv("MAIL_USE_TLS"))),
    "MAIL_USERNAME": os.getenv("MAIL_USERNAME"),
    "MAIL_PASSWORD": os.getenv("MAIL_PASSWORD")
}

app.config.update(mail_settings)
mail = Mail(app)

deta = Deta(os.getenv("DETA_PROJECT_KEY"))
deta_base = deta.Base("admin_logs")
deta_keys = deta.Base("api_keys")
deta_users = deta.Base("users")
deta_tokens = deta.Base("tokens")

# --- Admin-Panel ---

@app.route('/admin', methods=['GET', 'POST'])
def admin_panel():
    if not session.get('logged_in'):
        return redirect(url_for('login'))

    if request.method == 'POST':
        command = request.form['command']
        result = execute_command(command)
        deta_base.put({"command": command, "result": result, "user": session['user']})

    logs = deta_base.fetch().items
    return render_template('admin_panel.html', logs=logs)

# --- Befehlsausführung ---

def execute_command(command):
    if command.startswith("deta new"):
        project_name = command.split("deta new ")[1]
        if not project_name.isalnum():
            return "Ungültiger Projektname"
        os.system(f"deta new {project_name}")
        return f"Projekt '{project_name}' erstellt"
    elif command == "deta dev":
        os.system("deta dev")
        return "Entwicklungsumgebung gestartet"
    elif command == "deta logs":
        os.system("deta logs")
        return "Logs abgerufen"
    else:
        return "Ungültiger Befehl"

# --- API-Schlüsselverwaltung ---

@app.route('/api_keys', methods=['GET', 'POST'])
def api_keys():
    if not session.get('logged_in'):
        return redirect(url_for('login'))

    if request.method == 'POST':
        key_name = request.form['key_name']
        permissions = request.form.getlist('permissions')

        if not key_name.isalnum():
            flash("Schlüsselname muss alphanumerisch sein", "error")
        else:
            api_key = generate_api_key()
            deta_keys.put({"key_name": key_name, "api_key": api_key, "permissions": permissions})
            flash("API-Schlüssel erstellt", "success")

    keys = deta_keys.fetch().items
    return render_template('api_keys.html', keys=keys)

# --- API-Schlüsselgenerierung ---

def generate_api_key():
    return secrets.token_hex(16)

# --- Login/Logout ---

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = deta_users.get(username)

        if user and bcrypt.checkpw(password.encode(), user['password']):
            session['logged_in'] = True
            session['user'] = username
            return redirect(url_for('admin_panel'))
        else:
            flash("Ungültiger Benutzername oder Passwort", "error")

    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    session.pop('user', None)
    return redirect(url_for('login'))

# --- Benutzerverwaltung ---

@app.route('/users', methods=['GET', 'POST'])
def users():
    if not session.get('logged_in'):
        return redirect(url_for('login'))

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']

        if not username.isalnum() or not password:
            flash("Benutzername muss alphanumerisch sein und Passwort darf nicht leer sein", "error")
        elif deta_users.get(username):
            flash("Benutzername bereits vergeben", "error")
        else:
            hashed_password = bcrypt.hashpw(password.encode(), bcrypt

.gensalt())
            deta_users.put({"key": username, "password": hashed_password, "role": role})
            flash("Benutzer erstellt", "success")

    users = deta_users.fetch().items
    return render_template('users.html', users=users)

# --- Registrierungsfunktion mit E-Mail-Bestätigung ---

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        if not username.isalnum() or not password:
            flash("Benutzername muss alphanumerisch sein und Passwort darf nicht leer sein", "error")
        elif deta_users.get(username):
            flash("Benutzername bereits vergeben", "error")
        else:
            token = secrets.token_urlsafe(16)
            deta_tokens.put({"key": token, "username": username, "password": password, "email": email})
            confirm_url = url_for('confirm_email', token=token, _external=True)
            msg = Message("Bitte bestätigen Sie Ihre E-Mail-Adresse", recipients=[email])
            msg.body = f"Bitte klicken Sie auf den folgenden Link, um Ihre Registrierung abzuschließen: {confirm_url}"
            mail.send(msg)
            flash("Bitte überprüfen Sie Ihre E-Mails, um die Registrierung abzuschließen", "success")
            return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/confirm/<token>')
def confirm_email(token):
    data = deta_tokens.get(token)
    if data:
        username = data['username']
        password = data['password']
        email = data['email']
        hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
        deta_users.put({"key": username, "password": hashed_password, "email": email})
        deta_tokens.delete(token)
        flash("E-Mail erfolgreich bestätigt. Sie können sich jetzt einloggen.", "success")
        return redirect(url_for('login'))
    else:
        flash("Ungültiger oder abgelaufener Token", "error")
        return redirect(url_for('register'))

# --- Passwort zurücksetzen ---

@app.route('/reset_password', methods=['GET', 'POST'])
def reset_password():
    if request.method == 'POST':
        email = request.form['email']
        user = next((user for user in deta_users.fetch().items if user.get('email') == email), None)
        if user:
            token = secrets.token_urlsafe(16)
            deta_tokens.put({"key": token, "username": user['key']})
            reset_url = url_for('reset_password_confirm', token=token, _external=True)
            msg = Message("Passwort zurücksetzen", recipients=[email])
            msg.body = f"Bitte klicken Sie auf den folgenden Link, um Ihr Passwort zurückzusetzen: {reset_url}"
            mail.send(msg)
            flash("Bitte überprüfen Sie Ihre E-Mails, um das Passwort zurückzusetzen", "success")
            return redirect(url_for('login'))
        else:
            flash("E-Mail-Adresse nicht gefunden", "error")
    return render_template('reset_password.html')

@app.route('/reset_password_confirm/<token>', methods=['GET', 'POST'])
def reset_password_confirm(token):
    data = deta_tokens.get(token)
    if data:
        if request.method == 'POST':
            password = request.form['password']
            if not password:
                flash("Passwort darf nicht leer sein", "error")
            else:
                hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
                deta_users.update({"password": hashed_password}, data['username'])
                deta_tokens.delete(token)
                flash("Passwort erfolgreich zurückgesetzt. Sie können sich jetzt einloggen.", "success")
                return redirect(url_for('login'))
        return render_template('reset_password_confirm.html')
    else:
        flash("Ungültiger oder abgelaufener Token", "error")
        return redirect(url_for('reset_password'))

# --- HTTP-API-Endpunkte ---

@app.route('/api/<endpoint>', methods=['GET', 'POST', 'PUT', 'DELETE'])
def api(endpoint):
    api_key = request.headers.get('X-API-Key')
    key_data = deta_keys.get(api_key)

    if not key_data:
        return jsonify({"error": "Ungültiger API-Schlüssel"}), 401

    permissions = key_data.get("permissions", [])
    if request.method not in permissions:
        return jsonify({"error": "Unzureichende Berechtigungen"}), 403

    if endpoint == 'data':
        if request.method == "GET":
            data = deta_base.fetch().items
            return jsonify(data), 200
        elif request.method == "POST":
            data = request.get_json()
            deta_base.put(data)
            return jsonify({"message": "Daten gespeichert"}), 201
        elif request.method == "PUT":
            data = request.get_json()
            key = data.get("key")
            if not key:
                return jsonify({"error": "Schlüssel erforderlich"}), 400
            deta_base.put(data, key)
            return jsonify({"message": "Daten aktualisiert"}), 200
        elif request.method == "DELETE":
            key = request.args.get("key")
            if not key:
                return jsonify({"error": "Schlüssel erforderlich"}), 400
            deta_base.delete(key)
            return jsonify({"message": "Daten gelöscht"}), 200

    return jsonify({"message": "API-Endpunkt nicht gefunden"}), 404

# --- Suchfunktion ---

@app.route('/search', methods=['GET'])
def search():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    
    query = request.args.get('query')
    logs = deta_base.fetch({"command?contains": query}).items
    api_keys = deta_keys.fetch({"key_name?contains": query}).items
    users = deta_users.fetch({"key?contains": query}).items

    return render_template('search_results.html', logs=logs, api_keys=api_keys, users=users)

# --- Fehlerbehandlung ---

@app.errorhandler(404)
def page_not_found(e):
    return render_template('error_404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template('error_500.html'), 500

# CSRF-Schutz für alle POST-Anfragen
@app.before_request
def csrf_protect():
    if request.method == "POST":
        try:
            csrf.validate_csrf_token(request.form['csrf_token'])
        except:
            return jsonify({"message": "Ungültiges CSRF-Token", "status": "error"}), 400

if __name__ == '__main__':
    app.run(debug=True)
```

### Frontend (HTML und JS)

- `templates/base.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>{% block title %}{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    {% if session.get('logged_in') %}
        <nav>
            <a href="{{ url_for('admin_panel') }}">Admin Panel</a>
            <a href="{{ url_for('api_keys') }}">API-Schlüssel</a>
            <a href="{{ url_for('users') }}">Benutzer</a>
            <a href="{{ url_for('data') }}">Daten</a>  
            <a href="{{ url_for('logout') }}">Logout</a>
            <form id="search-form" method="GET" action="/search">
                <input type="text" id="search-query" name="query" placeholder="Suche...">
                <button type="submit">Suche</button>
            </form>
        </nav>
    {% else %}
        <a href="{{ url_for('login') }}">Login</a> |
        <a href="{{ url_for('register') }}">Registrieren</a>
    {% endif %}

    {% with messages = get_flashed_messages(with_categories=True) %}
        {% if messages %}
            {% for category, message in messages %}
                <div class="flash-message {{ category }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
    {% endwith %}

    {% block content %}{% endblock %}
</body>
</html>
```

- `templates/admin_panel.html`

```html
{% extends "base.html" %}

{% block title %}Admin Panel{% endblock %}

{% block content %}
    <h1>Admin Panel</h1>

    <h2>Befehl ausführen:</h2>
    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf.generate_csrf_token() }}">
        <input type="text" name="command" placeholder="Befehl eingeben">
        <button type="submit">Ausführen</button>
    </form>

    <h2>Logs:</h2>
    <ul>
        {% for log in logs %}
            <li>{{ log.command }} ({{ log.timestamp }}) by {{ log.user }}: {{ log.result }}</li>
        {% endfor %}
    </ul>

    <canvas id="userChart"></canvas>

    <a href="{{ url_for('api_keys') }}">API-Schlüssel verwalten</a>
    <a href="{{ url_for('users') }}">Benutzer verwalten</a>
{% endblock %}
```

- `templates/search_results.html`

```html
{% extends "base.html" %}

{% block title %}Suchergebnisse{% endblock %}

{% block content %}
    <h1>Suchergebnisse</h1>

    <h2>Logs:</h2>
    <ul>
        {% for log

 in logs %}
            <li>{{ log.command }} ({{ log.timestamp }}) by {{ log.user }}: {{ log.result }}</li>
        {% endfor %}
    </ul>

    <h2>API-Schlüssel:</h2>
    <ul>
        {% for key in api_keys %}
            <li>{{ key.key_name }}: {{ key.api_key }}</li>
        {% endfor %}
    </ul>

    <h2>Benutzer:</h2>
    <ul>
        {% for user in users %}
            <li>{{ user.key }}: {{ user.email }}</li>
        {% endfor %}
    </ul>
{% endblock %}
```

- `templates/register.html`

```html
{% extends "base.html" %}

{% block title %}Registrieren{% endblock %}

{% block content %}
    <h1>Registrieren</h1>

    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf.generate_csrf_token() }}">
        <input type="text" name="username" placeholder="Benutzername" required>
        <input type="password" name="password" placeholder="Passwort" required>
        <input type="email" name="email" placeholder="E-Mail" required>
        <button type="submit">Registrieren</button>
    </form>

    <a href="{{ url_for('login') }}">Bereits registriert? Hier einloggen</a>
{% endblock %}
```

- `templates/reset_password.html`

```html
{% extends "base.html" %}

{% block title %}Passwort zurücksetzen{% endblock %}

{% block content %}
    <h1>Passwort zurücksetzen</h1>

    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf.generate_csrf_token() }}">
        <input type="email" name="email" placeholder="E-Mail" required>
        <button type="submit">Passwort zurücksetzen</button>
    </form>

    <a href="{{ url_for('login') }}">Zurück zum Login</a>
{% endblock %}
```

- `templates/reset_password_confirm.html`

```html
{% extends "base.html" %}

{% block title %}Neues Passwort festlegen{% endblock %}

{% block content %}
    <h1>Neues Passwort festlegen</h1>

    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf.generate_csrf_token() }}">
        <input type="password" name="password" placeholder="Neues Passwort" required>
        <button type="submit">Passwort festlegen</button>
    </form>
{% endblock %}
```

- `templates/error_404.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>404 - Seite nicht gefunden</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <h1>404 - Seite nicht gefunden</h1>
    <p>Die angeforderte Seite konnte nicht gefunden werden. Bitte überprüfen Sie die URL oder kehren Sie zur Startseite zurück.</p>
    <a href="{{ url_for('admin_panel') }}">Zurück zum Admin Panel</a>
</body>
</html>
```

- `templates/error_500.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>500 - Interner Serverfehler</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <h1>500 - Interner Serverfehler</h1>
    <p>Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es später erneut oder kontaktieren Sie den Administrator.</p>
    <a href="{{ url_for('admin_panel') }}">Zurück zum Admin Panel</a>
</body>
</html>
```

- `frontend/script.js`

```javascript
// --- Hilfsfunktionen ---

function showMessage(message, type) {
    const messageDiv = document.getElementById("message");
    messageDiv.textContent = message;
    messageDiv.classList.add(type);
    setTimeout(() => {
        messageDiv.textContent = "";
        messageDiv.classList.remove(type);
    }, 3000); // Nachricht nach 3 Sekunden ausblenden
}

function encryptData(data) {
    // Verschlüsseln Sie den API-Schlüssel vor der Speicherung
    return btoa(data);
}

function decryptData(data) {
    // Entschlüsseln Sie den API-Schlüssel bei der Verwendung
    return atob(data);
}

async function sendApiRequest(endpoint, method, data = null) {
    const apiKey = decryptData(localStorage.getItem("apiKey"));

    try {
        const response = await fetch(`/api/${endpoint}`, {
            method: method,
            headers: {
                "Content-Type": "application/json",
                "X-API-Key": apiKey
            },
            body: data ? JSON.stringify(data) : null
        });

        const responseData = await response.json();
        if (!response.ok) {
            throw new Error(responseData.error || "API-Fehler");
        }
        return responseData;
    } catch (error) {
        showMessage(error.message, "error");
        throw error; 
    }
}

// --- Login ---

const loginForm = document.getElementById("login-form");
const registerForm = document.getElementById("register-form");
const toggleFormButton = document.getElementById("toggle-form");

loginForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    
    const username = loginForm.elements.username.value;
    const password = loginForm.elements.password.value;
    
    try {
        const response = await fetch("/login", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            body: `username=${username}&password=${password}`
        });

        if (response.redirected) {
            window.location.href = response.url;
        } else {
            const data = await response.json();
            showMessage(data.message, "error");
        }
    } catch (error) {
        showMessage("Fehler bei der Anmeldung", "error");
    }
});

// --- Registrierung ---

toggleFormButton.addEventListener("click", () => {
    loginForm.style.display = loginForm.style.display === "none" ? "block" : "none";
    registerForm.style.display = registerForm.style.display === "none" ? "block" : "none";
    toggleFormButton.textContent = loginForm.style.display === "none" ? "Zum Login wechseln" : "Zur Registrierung wechseln";
});

async function fetchData() {
    const response = await fetch('/api/data');
    const data = await response.json();
    return data;
}

async function renderChart() {
    const data = await fetchData();
    const ctx = document.getElementById('userChart').getContext('2d');
    const chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: data.labels,
            datasets: [{
                label: 'Benutzeranzahl',
                data: data.counts,
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: {
                    beginAtZero: true
                }
            }
        }
    });
}

document.addEventListener('DOMContentLoaded', function() {
    renderChart();
});

document.getElementById("search-form").addEventListener("submit", function(event) {
    event.preventDefault();
    const query = document.getElementById("search-query").value;
    window.location.href = `/search?query=${query}`;
});
```

### Tests (test_app.py)

```python
import unittest
from app import app

class AppTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_home_page(self):
        result = self.app.get('/')
        self.assertEqual(result.status_code, 200)

    def test_login_page(self):
        result = self.app.get('/login')
        self.assertEqual(result.status_code, 200)

    def test_register_page(self):
        result = self.app.get('/register')
        self.assertEqual(result.status_code, 200)

    def test_admin_panel_requires_login(self):
        result = self.app.get('/admin')
        self.assertEqual(result.status_code, 302)  # Umleitung zur Login-Seite

    def test_404_error(self):
        result = self.app.get('/nonexistent')
        self.assertEqual(result.status_code, 404)

    def test_500_error(self):
        result = self.app.get('/cause_500_error')
        self.assertEqual(result.status_code, 500)

if __name__ == '__main__':
    unittest.main()
```

### Sicherheit und Tests

- **CSRF-Schutz:** Implementiert durch `itsdangerous`.
- **Passwort-Hashing:** Implementiert durch `bcrypt`.
- **Fehlerbehandlung:** Benutzerdefinierte Fehlerseiten hinzugefügt.
- **E-Mail-Bestätigung:** E-Mail-Bestätigung bei Registrierung hinzugefügt.
- **Passwort zurücksetzen:** Passwort-Zurücksetzen-Funktion hinzugefügt.
- **Tests:** Umfassende Tests mit `unittest` hinzugefügt.

## 🌐 Sources
1. [selfhtml.org - Formulare/Suchen und Filtern](https://wiki.selfhtml.org/wiki/Formulare/Suchen_und_Filtern)
2. [tricat.net - Was ist ein Logfile und wo finde ich es?](https://tricat.net/faq/was-ist-e

in-logfile-und-wo-finde-ich-es/)
3. [cloud.ibm.com - Erstellen von API-Schlüsseln durch Benutzer einschränken](https://cloud.ibm.com/docs/account?topic=account-allow-api-create&locale=de)
4. [microsoft.com - .NET: Implementieren Ihrer eigenen Unternehmenssuche](https://learn.microsoft.com/de-de/archive/msdn-magazine/2019/april/net-implementing-your-own-enterprise-search)
5. [contabo.com - Auslesen von Log-Dateien](https://contabo.com/blog/de/auslesen-von-log-dateien/)
6. [cloud.google.com - API-Zugriff mit API-Schlüsseln einschränken](https://cloud.google.com/endpoints/docs/openapi/restricting-api-access-with-api-keys?hl=de)